- topic: Getting started
  abbrev: course-intro
  summary: |
    We begin the course by exploring some key ideas. We also practice
    ADT and data structure design.
  subjects: 
    - Course goals
    - Course structure
    - Academic honesty
    - ADTs and data structures
    - Designing a fraction ADT
    - A bit about OOP
  reading:
    - page: /syllabus/
    - page: /schedule/
    - page: /readings/oop-basics.html
    - page: /readings/designing-adts.html
    - page: /readings/designing-data-structures.html
  eboards:
    - page: /eboards/eboard01-1.html
    - page: /eboards/eboard01-2.html

- topic: Getting started with Java
  abbrev: java-small
  summary: |
    We consider some basic issues of Java programming.
  subjects:
    - From C to Java
    - The structure of a Java program
    - Compiling and running Java programs
    - Strings in Java
    - Numeric types in Java
    - Arrays in Java
    - Basic output in Java
    - Basic input in Java
  reading:
    - page: /readings/intro-java.html
    - page: /readings/simple-java-c.html
    - page: /readings/arrays.html
    - page: /readings/maven.html
  lab:
    - page: /labs/getting-started.html
    - page: /labs/maven.html
  eboards:
    - page: /eboards/eboard02-1.html
    - page: /eboards/eboard02-2.html

- topic: Getting started with Java development
  abbrev: java-development
  summary: |
    We consider tools for developing programs in Java, particularly the
    Microsoft VSCode integrated development environment (IDE) and the Git 
    version control system. 
  subjects:
    - IDEs
    - VSCode basics
    - Version control
    - Git basics
  reading:
    - page: /readings/git.html
    - page: /readings/github.html
    - page: /readings/vscode.html
    - link: Getting started with Visual Studio Code (video)
      url: https://code.visualstudio.com/docs/introvideos/basics
  lab:
    - page: /labs/vscode.html
    - page: /labs/git.html
  eboards:
    - page: /eboards/eboard03.html
  
- topic: Objects and classes
  abbrev: objects
  summary: |
    We consider Java's approach to objects, the primary building block
    of object-oriented programming.  We also explore Java's classes and
    how one might model them.
  subjects:
    - Object basics
    - Modeling objects with classes
  reading:
    - page: /readings/writing-classes.html
    - page: /readings/standard-methods.html
  lab:
    - page: /labs/intro-classes.html
  eboards:
    - page: /eboards/eboard04.html

- topic: Unit testing and debugging
  abbrev: unit-testing
  summary: |
    We return to concepts of unit testing and habits of debugging that 
    you first learned in CSC 151.  We also introduce the concept of
    test-driven development, common among agile developers.
  subjects:
    - A few thoughts on testing
    - An example
    - Test-driven development
    - Why use debuggers?
    - Debugging vs. print statements
    - Debugging in VSCode
  reading:
    - page: /readings/unit-testing.html
    - page: /readings/debugging.html
  lab:
    - page: /labs/unit-testing.html
    - page: /labs/debugging.html
  eboards:
    - page: /eboards/eboard05.html

- topic: Interfaces and subtype polymorphism
  abbrev: interfaces
  summary: |
    We consider interfaces, which serve as specifications of expected
    behavior for classes.  We also explore how interfaces support
    one form of polymorphism, a key aspect of object-oriented programming.
  subjects:
    - "Detour: Pair Programming, Revisited"
    - Interfaces
    - The building blocks of OOP
    - Subtype polymorphism
  reading:
    - page: /readings/interfaces.html
    - page: /readings/subtype-polymorphism.html
  lab:
    - page: /labs/subtype-polymorphism.html
  eboards:
    - page: /eboards/eboard06-1.html
    - page: /eboards/eboard06-2.html
 
- topic: Generics and parametric polymorphism
  abbrev: generics
  summary: |
    We continue our explortation of polymorphism by considering a second
    type of polymorphism, parametric polymorphism, and its realization in
    Java's generics.
  subjects:
    - Parametric polymorphism
    - Java generics
    - Generic classes
    - Generic interfaces
    - Generic methods
    - Generics and arrays
  reading:
    - page: /readings/generics.html
  lab:
    - page: /labs/generics.html
  eboards:
    - page: /eboards/eboard07-1.html
    - page: /eboards/eboard07-2.html

- topic: Exceptional programming
  abbrev: exceptions
  summary: |
    We introduce exceptions and consider their use.
  subjects:
    - Exceptions
    - Object-oriented design
  reading:
    - page: /readings/exceptions.html
  lab:
    - page: /labs/exceptions.html
  eboards:
    - page: /eboards/eboard08-1.html
    - page: /eboards/eboard08-2.html


- topic: Design day
  abbrev: associative-arrays
  summary:
    We practice some design in preparation for MP4.
  subjects:
    - ADT design, revisited
    - Data structure design, revisited
    - Dictionaries
    - Associative arrays
  eboards:
    - page: /eboards/eboard09-1.html
    - page: /eboards/eboard09-2.html

- topic: Inheritance and composition
  abbrev: inheritance
  summary: |
    We consider inheritance, other core aspects of object-oriented
    design. We also consider some underlying issues in the design
    and implementation of objects in Java and how we might represent
    objects visually.
  subjects:
    - Inheritance basics
    - Inheritance and polymorphism
    - Composition
    - Compile time vs. run time
    - References
    - Representing objects
  reading:
    - page: /readings/inheritance.html
    - page: /readings/composition.html
    - page: /readings/mental-models.html
  lab:
    - page: /labs/inheritance.html
  eboards:
  
- topic: Linear structures
  abbrev: linked-structures
  summary: |
    We consider a few basic structures, such as queues and stacks,
    and generalize them to linear structures.  We explore ways in
    which arrays and simple linked objects can be used to implement
    linear structures. We practice building linked linear structures.
  subjects:
    - The design of ADTs, revisited
    - A list ADT
    - Linear structures 
    - Stacks 
    - Queues 
    - Priority queues
    - Other linear structures
    - Implementing linear structures with arrays
    - Implementing linear structures as linked structures
  reading:
    - page: /readings/linear-structures.html 
    - page: /readings/stacks.html
    - page: /readings/queues.html
    - page: /readings/priority-queues.html
  lab:
    - page: /labs/linear-structures.html
  
- topic: Array-based linear structures
  abbrev: array-based-structures
  summary: |
    We explore ways in which arrays can be used to implement linear structures.
  subjects: 
    - "Detour: Wrappers"
    - Implementing linear structures with arrays
    - Array-based queues
    - Priority queues and their implementation
  reading:
    - page: /readings/wrappers.html
  lab:
    - page: /labs/array-based-queues.html
  note:
    - Cut out iterators
    - May need to rewrite to deal with priority queues (sorted arrays?, sorted linked structures?)
  
- topic: Iterators and Comparators
  abbrev: ators
  summary: |
    We consider iterators, a standard mechanism for accessing the
    elements of a collection, and explore the use of Java's
    anonymous inner classes to build iterators. We consider comparators,
    a standard mechanism for comparing values, and explore the use
    of Java's lambdas to implement comparators.
  subjects:
    - Iterators
    - Iterating array-based structures
    - Iterating linked linear structures
    - Named iterators
    - Anonymous inner classes
    - Anonymous functions reviewed
    - Anonymous functions in Java
    - Functional interfaces
  reading: 
    - page: /readings/anonymous-inner-classes.html
    - page: /readings/iterators.html
    - page: /readings/comparators.html
    - page: /readings/priority-queues.html
    - link: "The Java Tutorial: Lambda Expressions"
      url: https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html
  lab:
    - page: /labs/iterators.html
    - page: /labs/comparators.html
  reminders:
    - Need to rewrite the anonymous inner class reading to focus on iterators
    - May need to write an iterator reading (don't I have one)
    - For lab, may have them implement iterators
    - Note that there are some good questions about iterators at the start
      of the array-based-lists lab.
    - Need to write the comparators lab. Use the PQ reading?

- topic: Analyzing algorithms
  abbrev: analysis
  summary: |
    We consider ways to analyze the resource use of algorithms, including
    formal notation for describing that use.
  subjects:
    - Comparing algorithms
    - Empirical analysis
    - Asymptotic analysis
    - Counting steps
    - Big-O, formalized
    - Implications of Big-O
    - Practice with Big-O
    - Comparing Big-O and empirical approaches
  reading:
    - CLRS 3 (Characterizing Running Times)
  reminders:
    - Copy PM's lab (I may have done that)
    - Find an appropriate reading (CLRS?)

- topic: Analyzing recursive algorithms
  abbrev: analysis-recursive
  summary: |
    We consider techniques for analyzing recursive algorithms.
  subjects:
    - Iterative analysis, revisited
    - Recurrence relations
    - Approaches to recurrence relations
  reading:
    - CLRS 4 (intro)
    - CLRS 4.3 -- I-4.5 (Methods for solving recurrences)
  reminders:
    - Need to write the lab (or find one in PM).  Did I do so?
    - Find a reading?

  lab:
    - page: /labs/anonymous-functions.html
  reminders:
    - May want to rewrite the lab to use priority queues or sorted lists.
    - May want to add a reading on sorted lists.  Or should that be an exercise?

- topic: Searching
  abbrev: searching
  summary: |
    We consider the problem of searching a collection and techniques
    for searching various kinds of collections. We also consider
    loop invariants, a technique for helping ensure the correctness
    of programs.
  subjects:
    - Modeling the problem of searching
    - Sequential search
    - Predicates
    - Binary search
    - Comparators
    - Testing binary search
    - Reasoning about iterative algorithms
    - The state of a program
    - Loop invariants
  reading:
    - page: /readings/search.html
    - page: /readings/loop-invariants.html
  lab:
    - page: /labs/binary-search.html

- topic: Sorting
  abbrev: sorting
  summary: |
    We return to the problem of sorting a list or array.
  subjects:
    - The problem of sorting
    - Testing sorting algorithms
    - Insertion sort
    - Selection sort
    - Generic sorts
  reading:
    - page: /readings/sorting.html
  reminders:
    - Some class time talking about unit tests
    - Some class time talking about invariants

- topic: "Divide-and-conquer sorting mechanisms: Merge sort and Quicksort"
  abbrev: divide-and-conquer-sort
  summary: |
    We consider the classic merge sort and Quicksort algorithm.
  subjects:
    - Lower bounds on sorting
    - Divide-and-conquer algorithms
    - An introduction to merge sort
    - Analyzing merge sort
    - A quick introduction to Quicksort
    - Partitioning
    - Partitioning with invariants
    - Key ideas from Quicksort
  reading:
    - page: /readings/sorting.html
    - page: /readings/mergesort.html
    - page: /readings/quicksort.html
  lab:
    - page: /labs/mergesort.html
    - page: /labs/quicksort.html

- topic: Doubly-linked lists
  abbrev: doubly-linked-lists
  summary: |
    We explore more sophisticated versions of the linked-list data structure
  subjects:
    - Linked lists, reviewed
    - Doubly-linked lists
    - Circularly-linked lists
    - Other list issues
  reading:
    - page: /readings/list-adts.html
    - link: Lists with "current" considered harmful
      url: http://csis.pace.edu/~bergin/papers/ListsWithCurrent.html
    - link: java.util.List
      url: https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/List.html
    - link: java.util.ListIterator
      url: https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/ListIterator.html
    - page: /readings/list-iterators.html
    - page: /readings/doubly-linked-lists.html
  lab:
    - page: /labs/doubly-linked-lists.html

- topic: Ethical considerations (+ sorting competition)
  abbrev: ethics
  summary: |
    We consider our responsibilities as programming professionals.
    We also compare sorting algorithms from the latest mini-project.
  subjects:
    - Professional ethics.
    - Sorting competition
  reading:
    - link: ACM Code of Ethics and Professional Conduct
      url: https://www.acm.org/code-of-ethics

- topic: Trees and tree traversal
  abbrev: Trees
  summary: |
    We introduce the tree structure and mechanisms for iterating trees.
  subjects:
    - Representing hierarchical information
    - Tree terminology
    - Depth-first and breadth-first traversal
    - Recursive depth-first traversal
    - Iterative breadth-first traversal
    - Iterative depth-first traversal
    - Pre-order, in-order, and post-order traversals
  reading:
    - page: /readings/tree-traversal.html
  lab:
    - page: /labs/tree-traversal.html

- topic: A Dictionary ADT and binary search trees
  abbrev: maps
  summary: |
    We introduce the Dictionary (a.k.a. Map) abstract data type and some
    simple implementations.
  subjects:
    - Maps and dictionaries
    - Designing a Dictionary ADT
    - Associative arrays
    - Association lists
  lab:
    - page: /labs/binary-search-trees.html
    - page: /labs/binary-search-trees-continued.html

- topic: Hash tables
  abbrev: hash-tables
  summary: |
    We consider hash tables, one of the most efficient implementations
    of the Map abstract data type.  We also explore the issue of hash
    functions.
  subjects:
    - Integer maps
    - From objects to integers
    - Handling collisions
    - Rebuilding hash tables
    - Hash functions
  reading:
    - link: "Osera 12: Hashing"
      url: https://www.cs.grinnell.edu/~rebelsky/Courses/CSC207/osera/chap12.pdf
  reminders:
    - Have them write a hash function for our good old fraction class.

- topic: Implementating hash tables
  abbrev: hash-table-implementations
  summary: |
    We explore the two primary collision-resolution mechansims
    in hash tables.
  subjects:
    - Collisions
    - Linear probing
    - Quadratic probing
    - Buckets and chaining
  lab:
    - page: /labs/hash-table-probing.html
    - page: /labs/hash-table-chained.html

- topic: Priority queues, heaps, and heap sort
  abbrev: heaps
  summary: |
    We return to the subject of priority queues and consider heaps, one
    of the more efficient ways to represent priority queues.
  subjects:
    - Priority queues, revisited
    - The heap structure
    - Adding elements to heaps
    - Removing elements from heaps
    - Storing trees in arrays
  reading: 
    - page: /readings/priority-queues.html
  reminders:
    - Is this worth doing as a discussion or as a lab?  I like the discussion of heaps, but students also learn from practice.  
    - Maybe we need two days. Unfortunately, we don't have them.
    - Perhaps a longer day is enough
  notes: ../eboards/eboard37.html

- topic: "Graphs: An ADT and basic traversal techniques"
  abbrev: graphs
  summary: |
    We consider a graph abstract data type and some common implementations
    of graphs.
  subjects:
    - Modeling problems with graphs
    - Graph terminology
    - Weighted graphs
    - Directed graphs
    - Implementing graphs with adjacency matrices
    - Implementing graphs with adjacency lists
    - Implementing graphs with edge tables
  reading:
    - link: "CLRS B.4: Graphs"
      url: https://ebookcentral-proquest-com.grinnell.idm.oclc.org/lib/grinnell-ebooks/reader.action?docID=6925615&ppg=907
    - page: /readings/tree-traversal.html
    - link: "Wikipedia: Dijkstra's Algorithm"
      url: https://en.wikipedia.org/wiki/Dijkstra's_algorithm
    - link: "Graph.java: A Java graph implementation"
      url: https://raw.githubusercontent.com/Grinnell-CSC207/graphs/main/src/Graph.java
  reminders:
    - Anya has a lab on graphs.  http://www.cs.grinnell.edu/~vostinar/csc-207-spring-2018-schedule/csc-207-s18-representing-graphs/

- topic: Minimum spanning trees
  abbrev: mst
  summary: |
    We consider how to build minimum spanning trees in graphs
  subjects:
    - Minimum spanning trees
    - Strategies for building minimum spanning trees
    - Kruskal's algorithm
    - Prim's algorithm
    - Greed as an approach to algorithm design
  reading:
    - link: "Wikipedia: Prim's Algorithm"
      url: https://en.wikipedia.org/wiki/Prim%27s_algorithm
    - link: "Wikipedia: Kruskal's Algorithm"
      url: https://en.wikipedia.org/wiki/Kruskal%27s_algorithm
  lab:
    - page: /labs/minimum-spanning-trees.html
  notes: ../eboards/eboard41.html

- topic: Wrapup
  abbrev: wrapup
  summary: | 
    We conclude the course.
  subjects:
    - The subject matter(s) of the course
    - Debrief
    - Course evaluation

- topic: All work due
  abbrev: finals
  summary: |
    All work for the class is due on Friday of finals week.

- topic: Patterns of object and algorithm design
  abbrev: design
  summary: |
    We consider a few more issues of object and algorithm design.
  subjects:
    - Algorithm design
    - ADT design
    - Data-structure design
    - Object/class design
    - Code design

- topic: Design patterns
  abbrev: patterns
  summary: |
    We consider design patterns, common approaches to solving the kinds
    of issues that we often see in the design of larger object-oriented
    programs.
  subjects:
    - Design patterns
    - Factories
    - Singletons
    - '"Wrapper" classes'
  reminders:
    - Need readings
    - Need lab

- topic: Lists and list Iterators
  abbrev: list-iterators
  summary: |
    We return to list ADTs, this time conceiving of lists only in
    terms of the iterators we build for them. We implement lists
    using arrays.
  subjects:
    - A simple list interface
    - The java.util.List interface
    - The java.util.ListIterator interace
  reading:
    - page: /readings/list-adts.html
    - link: Lists with "current" considered harmful
      url: http://csis.pace.edu/~bergin/papers/ListsWithCurrent.html
    - link: java.util.List
      url: https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/List.html
    - link: java.util.ListIterator
      url: https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/ListIterator.html
  lab:
    - page: /labs/array-based-lists.html

