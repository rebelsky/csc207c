- topic: Getting started
  abbrev: course-intro
  summary: |
    We begin the course by exploring some key ideas.
  subjects: 
    - Course goals
    - Course structure
    - Academic honesty
    - ADTs and data structures
    - Designing a stack ADT (an exercise)
    - A bit about OOP
  reading:
    - page: /syllabus/
    - page: /schedule/
    - page: /readings/oop-basics.html
    - page: /readings/designing-adts.html
    - page: /readings/designing-data-structures.html
  notes: ../eboards/eboard01.html

- topic: Designing expandable arrays
  abbrev: expandable-arrays
  summary:
    We practice ADT and data structure design.
  subjects:
    - Philosophy
    - Methods
    - Layout
    - Implementation
    - Analysis
  reading:
    - page: /readings/intro-java.html
    - page: /readings/simple-java-c.html
    - page: /readings/arrays.html
  notes: ../eboards/eboard02.html

- topic: Programming in the small with Java
  abbrev: java-small
  summary: |
    We consider some basic issues of Java programming.
  subjects:
    - From C to Java
    - The structure of a Java program
    - Compiling and running Java programs
    - Strings in Java
    - Numeric types in Java
    - Arrays in Java
    - Basic output in Java
    - Basic input in Java
  reading:
    - page: /readings/intro-java.html
    - page: /readings/simple-java-c.html
    - page: /readings/arrays.html
  lab:
    - page: /labs/getting-started.html
  notes: ../eboards/eboard03.html

- topic: Getting started with Java development
  abbrev: java-development
  summary: |
    We consider tools for developing programs in Java, particularly the
    Microsoft VSCode integrated development environment (IDE) and the Git 
    version control system. 
  subjects:
    - IDEs
    - VSCode basics
    - Version control
    - Git basics
  reading:
    - page: /readings/git.html
    - page: /readings/vscode.html
  lab:
    - page: /labs/vscode.html
    - page: /labs/git.html
  notes: ../eboards/eboard04.html
  
- topic: Objects and classes
  abbrev: objects
  summary: |
    We consider Java's approach to objects, the primary building block
    of object-oriented programming.  We also explore Java's classes and
    how one might model them.
  subjects:
    - Object basics
    - Modeling objects with classes
  reading:
    - page: /readings/writing-classes.html
    - page: /readings/standard-methods.html
  lab:
    - page: /labs/intro-classes.html
  notes: ../eboards/eboard05.html

- topic: Objects and classes continued
  abbrev: classes-continued
  summary: |  
    We continue to explore Java's approach to classes and objects.
  subjects:
    Practice building objects.
  lab:
    - page: /labs/intro-classes.html
  notes: ../eboards/eboard06.html

- topic: Object semantics
  abbrev: object-sememantics
  summary: |
    We consider some underlying issues in the design and implementation
    of objects in Java.  We explore some ways to represent objects
    visually.
  subjects:
    - References
    - The stack and the heap
    - Representing objects
  reading:
    - page: /readings/memory.html
    - page: /readings/object-semantics.html
  reminders:
    - This may need a new reading to replace PM's.
  notes: ../eboards/eboard07.html

- topic: Unit testing and debugging
  abbrev: unit-testing
  summary: |
    We return to concepts of unit testing and habits of debugging that 
    you first learned in CSC 151.  We also introduce the concept of
    test-driven development, common among agile developers.
  subjects:
    - A few thoughts on testing
    - An example
    - Test-driven development
    - Why use debuggers?
    - Debugging vs. print statements
    - Debugging in VSCode
  reading:
    - page: /readings/unit-testing.html
    - page: /readings/debugging.html
  lab:
    - page: /labs/unit-testing.html
    - page: /labs/debugging.html
  reminders:
    - Needs to be rewriten to incorporate VScode's debugger.
    - Unit testing has changed, too.
    - Should this be split?  Probably.

- topic: Interfaces and subtype polymorphism
  abbrev: interfaces
  summary: |
    We consider interfaces, which serve as specifications of expected
    behavior for classes.  We also explore how interfaces support
    one form of polymorphism, a key aspect of object-oriented programming.
  subjects:
    - Interfaces
    - The building blocks of OOP
    - Subtype polymorphism
  reading:
    - page: /readings/interfaces.html
    - page: /readings/subtype-polymorphism.html
  lab:
    - page: /labs/subtype-polymorphism.html
  
- topic: Generics and parametric polymorphism
  abbrev: generics
  summary: |
    We continue our explortation of polymorphism by considering a second
    type of polymorphism, parametric polymorphism, and its realization in
    Java's generics.
  subjects:
    - Subtype polymorphism, revisited
    - Parametric polymorphism
    - Java generics
    - Generic classes
    - Generic interfaces
    - Generic methods
    - Generics and arrays
  reading:
    - page: /readings/generics.html
  lab:
    - page: /labs/generics.html

- topic: Exceptional programming
  abbrev: exceptions
  summary: |
    We introduce exceptions and consider their use.
  subjects:
    - Exceptions
    - Object-oriented design
  reading:
    - page: /readings/exceptions.html

- topic: Inheritance
  abbrev: inheritance
  summary: |
    We consider inheritance, the third core aspect of object-oriented
    design.
  subjects:
    - Inheritance basics
    - Inheritance and polymorphism
    - Compile time vs. run time
  reading:
    - page: /readings/inheritance.html
  lab:
    - page: /labs/inheritance.html
  
- topic: List ADTs
  abbrev: list-adts
  summary: |
    We consider lists and ways to think about them.  We practice ADT
    design.
  subjects:
    - The design of ADTs, revisited
    - Scheme lists
    - Java lists
  reminders:
    - I think this is a discussion-based day.

- topic: Linear structures
  abbrev: linked-structures
  summary: |
    We consider linear structures, such as queues and stacks.  We
    explore ways in which arrays and simple linked objects can be used to
    implement linear structures.
  subjects:
    - Linear structures 
    - Stacks 
    - Queues 
    - Priority queues
    - Other linear structures
    - Implementing linear structures with arrays
    - Implementing linear structures as linked structures
  reading:
    - page: /readings/linear-structures.html 
    - page: /readings/stacks.html
    - page: /readings/queues.html
  lab:
    - page: /labs/linear-structures.html
  
- topic: Array-based linear structures
  abbrev: array-based-structures
  summary: |
    We explore ways in which arrays can be used to implement linear structures.
  subjects: 
    - "Detour: Wrappers"
    - Implementing linear structures with arrays
    - Array-based queues
    - Priority queues and their implementation
  reading:
    - page: /readings/priority-queues.html
    - page: /readings/wrappers.html
  lab:
    - page: /labs/array-based-queues.html
  note:
    - Cut out iterators
    - May need to rewrite to deal with priority queues (sorted arrays?, sorted linked structures?)
  
- topic: Iterators
  abbrev: iterators
  summary: |
    We consider iterators, a standard mechanism for accessing the
    elements of a collection.  We explore the use of Java's
    anonymous inner classes to build iterators.
  subjects:
    - Iterators
    - Iterating array-based structures
    - Iterating linked linear structures
    - Named iterators
    - Anonymous inner classes
  reading: 
    - page: /readings/anonymous-inner-classes.html
    - page: /readings/iterators.html
  lab:
    - page: /labs/iterators.html
  reminders:
    - Need to rewrite the anonymous inner class reading to focus on iterators
    - May need to write an iterator reading (don't I have one)
    - For lab, may have them implement iterators
    - Note that there are some good questions about iterators at the start
      of the array-based-lists lab.

- topic: Analyzing algorithms
  abbrev: analysis
  summary: |
    We consider ways to analyze the resource use of algorithms, including
    formal notation for describing that use.
  subjects:
    - Comparing algorithms
    - Empirical analysis
    - Asymptotic analysis
    - Counting steps
    - Big-O, formalized
    - Implications of Big-O
  lab:
    - page: /labs/empirical-analysis.html
  reminders:
    - Copy PM's lab (I may have done that)
    - Find an appropriate reading (CLRS?)

- topic: Analyzing algorithms, continued
  abbrev: analysis-continued
  summary: |
    We continue our exploration of the analysis of algorithms.
  subjects:
    - Practice with Big-O
    - Comparing Big-O and empirical approaches
  lab:
    - page: /labs/complexity.html

- topic: Analyzing recursive algorithms
  abbrev: analysis-recursive
  summary: |
    We consider techniques for analyzing recursive algorithms.
  subjects:
    - Iterative analysis, revisited
    - Recurrence relations
    - Approaches to recurrence relations
  lab:
    - page: /labs/analyze-recursive.html
  reminders:
    - Need to write the lab (or find one in PM).  Did I do so?
    - Find a reading?

- topic: Anonymous functions
  abbrev: lambda
  summary: |
    We consider Java's support for anonymous functions.
  subjects:
    - Anonymous functions reviewed
    - Anonymous functions in Java
    - Functional interfaces
    - Priority queues, revisited
    - Sorted lists
  reading:
    - link: "The Java Tutorial: Lambda Expressions"
      url: https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html
    - page: /readings/priority-queues.html
  lab:
    - page: /labs/anonymous-functions.html
  reminders:
    - May want to rewrite the lab to use priority queues or sorted lists.
    - May want to add a reading on sorted lists.  Or should that be an exercise?

- topic: Searching
  abbrev: searching
  summary: |
    We consider the problem of searching a collection and techniques
    for searching various kinds of collections.
  subjects:
    - Modeling the problem of searching
    - Sequential search
    - Predicates
    - Binary search
    - Comparators
    - Testing binary search
  reading:
    - page: /readings/search.html
  lab:
    - page: /labs/binary-search.html

- topic: Loop invariants
  abbrev: loop-invariants
  summary: |
    We consider loop invariants, an important technique for designing
    iterative algorithms.
  subjects:
    - Reasoning about iterative algorithms
    - The state of a program
    - Loop invariants
    - Loop termination
    - "An exercise: Binary search"
  reading:
    - page: /readings/loop-invariants.html
  reminders:
    - May need to write a lab.  (I think we did this collaboratively.)

- topic: Sorting
  abbrev: sorting
  summary: |
    We return to the problem of sorting a list or array.
  subjects:
    - The problem of sorting
    - Testing sorting algorithms
    - Insertion sort
    - Selection sort
    - Generic sorts
  reading:
    - page: /readings/sorting.html
  reminders:
    - Some class time talking about unit tests

- topic: Merge sort
  abbrev: mergesort
  summary: |
    We consider the classic merge sort algorithm.
  subjects:
    - Lower bounds on sorting
    - Divide-and-conquer algorithms
    - An introduction to merge sort
    - Analyzing merge sort
  reading:
    - page: /readings/mergesort.html
  lab:
    - page: /labs/mergesort.html
  reminders:
    - Use PM's lab.  (Why?)

- topic: Quicksort
  abbrev: quicksort
  summary: |
    We consider the classic Quicksort algorithm.
  subjects:
    - A quick introduction to Quicksort
    - Partitioning
    - Partitioning with invariants
    - Key ideas from Quicksort
  reading:
    - page: /readings/quicksort.html
  lab:
    - page: /labs/quicksort.html

- topic: Ethical considerations
  abbrev: ethics
  summary: |
    We consider our responsibilities as programming professionals.
  subjects:
    - Professional ethics.
  reading:
    - ACM Code of Ethics

- topic: Array-based lists
  abbrev: array-lists
  summary: |
    We return to the list ADT and explore how to implement lists using
    arrays.
  subjects:
    - A simple list interface
    - The java.util.List interface
    - The java.util.ListIterator interace
  reading:
    - page: /readings/list-adts.html
    - link: Lists with "current" considered harmful
      url: http://csis.pace.edu/~bergin/papers/ListsWithCurrent.html
    - link: java.util.List
      url: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html
    - link: java.util.ListIterator
      url: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ListIterator.html
  lab:
    - page: /labs/array-based-lists.html

- topic: Doubly-linked lists
  abbrev: doubly-linked-lists
  summary: |
    We explore more sophisticated versions of the linked-list data structure
  subjects:
    - Linked lists, reviewed
    - Doubly-linked lists
    - Circularly-linked lists
    - Other list issues
  reading:
    - page: /readings/list-iterators.html
    - page: /readings/doubly-linked-lists.html
  lab:
    - page: /labs/doubly-linked-lists.html

- topic: Sorting competition
  abbrev: sorting-competition
  summary: |
    We compare the sorting algorithms from the latest homework.
  
- topic: A Dictionary ADT
  abbrev: maps
  summary: |
    We introduce the Dictionary (a.k.a. Map) abstract data type and some
    simple implementations.
  subjects:
    - Maps and dictionaries
    - Designing a Dictionary ADT
    - Associative arrays
    - Association lists
  reminders:
    - Needs a new reading
    - There's an association lists lab from 2014 Fall.

- topic: Trees and tree traversal
  abbrev: Trees
  summary: |
    We introduce the tree structure and mechanisms for iterating trees.
  subjects:
    - Representing hierarchical information
    - Tree terminology
    - Depth-first and breadth-first traversal
    - Recursive depth-first traversal
    - Iterative breadth-first traversal
    - Iterative depth-first traversal
    - Pre-order, in-order, and post-order traversals
  lab:
    - page: /labs/tree-traversal.html
  reminders:
    - This is likely a new lab.  Or I have one from 2014 Fall.
    - We may need a new reading.

- topic: Binary search trees I
  abbrev: bst1
  summary: | 
    We consider binary search trees, one of the standard implementations
    of the Map abstract data type.
  subjects: 
    - The structure of binary search trees
    - Organizing binary search trees
    - Adding elements to BSTs
  lab:
    - page: /labs/binary-search-trees.html

- topic: Binary search trees II
  abbrev: bst2
  summary: |
    We continue our exploration of binary search trees.
  subjects:
    - Deletion in BSTs
  lab:
    - page: /labs/binary-search-trees-continued.html

- topic: Hash tables
  abbrev: hash-tables
  summary: |
    We consider hash tables, one of the most powerful implementations
    of the Map abstract data type.  We also explore the issue of hash
    functions.
  subjects:
    - Integer maps
    - From objects to integers
    - Handling collisions
    - Rebuilding hash tables
    - Hash functions
  reading:
    - link: "Osera 12: Hashing"
      url: https://www.cs.grinnell.edu/~rebelsky/Courses/CSC207/osera/chap12.pdf

- topic: Probing in hash tables
  abbrev: probing
  summary: |
    We explore one of the two primary collision-resolution mechansims
    in hash tables.
  subjects:
    - Collisions
    - Linear probing
    - Quadratic probing
  lab:
    - page: /labs/hash-table-probing.html
  reminders:
    - Lots of this lab can be moved to other days.
    - Have them write a hash function for our good old fraction class.

- topic: Chaining in hash tables
  abbrev: chaining
  summary: |
    We explore the second of two primary collision-resolution mechanisms
    in hash tables.
  subjects:
    - Buckets and chaining
  lab:
    - page: /labs/hash-table-chained.html

- topic: Priority queues, heaps, and heap sort
  abbrev: heaps
  summary: |
    We return to the subject of priority queues and consider heaps, one
    of the more efficient ways to represent priority queues.
  subjects:
    - Priority queues, revisited
    - The heap structure
    - Adding elements to heaps
    - Removing elements from heaps
    - Storing trees in arrays
  reading: 
    - page: /readings/priority-queues.html
  lab:
    - page: TBD
  reminders:
    - Is this worth doing as a discussion or as a lab?  I like the discussion of heaps, but students also learn from practice.  
    - Maybe we need two days.

- topic: A graph ADT
  abbrev: graphs
  summary: |
    We consider a graph abstract data type and some common implementations
    of graphs.
  subjects:
    - Modeling problems with graphs
    - Graph terminology
    - Weighted graphs
    - Directed graphs
    - Implementing graphs with adjacency matrices
    - Implementing graphs with adjacency lists
    - Implementing graphs with edge tables
  reminders:
    - Readings?  Neither PM nor I seem to have any.  Anya used Skiena.
    - http://www.cs.grinnell.edu/~rebelsky/Courses/CS152/2006S/EBoards/graphs.txt
    - Maybe the appropriate section of CLRS?
    - Anya has a lab on graphs.  http://www.cs.grinnell.edu/~vostinar/csc-207-spring-2018-schedule/csc-207-s18-representing-graphs/

- topic: Traversing graphs
  abbrev: graph-traversal
  summary: |
    We consider the problem of visiting all the nodes in a graph,
    expanding the approaches we used for trees.
  subjects:
    - Review of tree traversal
    - Breadth-first traversal
    - Depth-first traversal
  reading:
    - page: /readings/tree-traversal.html
  lab: 
    - page: /labs/graph-traversal.html

- topic: Minimum spanning trees
  abbrev: mst
  summary: |
    We consider how to build minimum spanning trees in graphs
  subjects:
    - Minimum spanning trees
    - Strategies for building minimum spanning trees
    - Kruskal's algorithm
    - Prim's algorithm
    - Greed as an approach to algorithm design
  reading:
    - link: "Wikipedia: Prim's Algorithm"
      url: https://en.wikipedia.org/wiki/Prim%27s_algorithm
    - link: "Wikipedia: Kruskal's Algorithm"
      url: https://en.wikipedia.org/wiki/Kruskal%27s_algorithm
  lab:
    - page: /labs/minimum-spanning-trees.html

- topic: Shortest paths in graphs
  abbrev: shortest-path
  summary: |
    We consider the problem of finding the shortest path between two
    nodes in a graph
  subjects:
    - The shortest path problem
    - Shortest paths in unweighted graphs
    - Shortest paths in weighted graphs
    - Dijkstra's algorithm
  reading:
    - link: "Wikipedia; Dijkstra's Algorithm"
      url: https://en.wikipedia.org/wiki/Dijkstra's_algorithm
  lab:
    - page: /labs/shortest-paths.html

- topic: Wrapup
  abbrev: wrapup
  summary: | 
    We conclude the course.
  subjects:
    - The subject matter(s) of the course
    - Looking ahead
    - Course evaluation

- topic: Patterns of object and algorithm design
  abbrev: design
  summary: |
    We consider a few more issues of object and algorithm design.
  subjects:
    - Algorithm design
    - ADT design
    - Data-structure design
    - Object/class design
    - Code design

- topic: Design patterns
  abbrev: patterns
  summary: |
    We consider design patterns, common approaches to solving the kinds
    of issues that we often see in the design of larger object-oriented
    programs.
  subjects:
    - Design patterns
    - Factories
    - Singletons
    - '"Wrapper" classes'
  reminders:
    - Need readings
    - Need lab

- topic: Java from the command line
  abbrev: command-line
  summary: |
    We consider how to build larger Java programs, with multiple files
    and such.
  subjects:
    - Multi-file programs
    - Build systems
    - Why use the command line?
    - Maven from the command line
    - Maven from VSCode
  readings:
    - page: /readings/maven.html
  labs:
    - page: /labs/command-line.html

